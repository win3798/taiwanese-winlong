<!DOCTYPE html>
<html lang="zh-Hant">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>台語文字拖拉組句工具</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: #f9f9f9;
            height: 100vh;
            overflow-y: auto;
        }
        h1 {
            margin: 20px 0;
            color: #333;
        }
        .input-area {
            margin: 10px 0;
            width: 80%;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        textarea {
            width: 100%;
            height: 100px;
            padding: 10px;
            border: 2px solid #ccc;
            border-radius: 5px;
            resize: none;
            font-size: 16px;
        }
        .word-bank, .sentence-area {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 10px;
            margin: 10px 0;
            padding: 10px;
            background-color: #fff;
            border: 2px solid #ccc;
            border-radius: 10px;
            min-height: 60px;
            width: 80%;
        }
        .word {
            padding: 10px 15px;
            background-color: #007bff;
            color: white;
            border-radius: 5px;
            cursor: grab;
            user-select: none;
            text-align: center;
        }
        .word.dragging {
            opacity: 0.5;
        }
        .sentence-area {
            grid-template-rows: repeat(8, auto);
            border-style: dashed;
        }
        .buttons {
            margin-top: 20px;
            display: flex;
            gap: 15px;
        }
        button {
            padding: 10px 20px;
            font-size: 16px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        button.reset {
            background-color: #f44336;
            color: white;
        }
        button.check {
            background-color: #4CAF50;
            color: white;
        }
    </style>
</head>
<body>
    <h1>臺語文字拖拉組句工具</h1>

    <div class="input-area">
        <textarea id="paragraphInput" placeholder="輸入一段文章，系統會拆分成字或詞..."></textarea>
        <button id="generateWords">生成字卡</button>
        <textarea id="customWordInput" placeholder="輸入自定義字卡..."></textarea>
        <button id="addCustomWord">新增字卡</button>
    </div>

    <div class="word-bank" id="wordBank">
        <!-- Generated words will appear here -->
    </div>

    <div class="sentence-area" id="sentenceArea">
        <!-- User drops words here to form sentences -->
    </div>

    <div class="buttons">
        <button class="reset" id="resetBtn">重置</button>
        <button class="check" id="checkBtn">檢查句子</button>
    </div>

    <script>
        const wordBank = document.getElementById('wordBank');
        const sentenceArea = document.getElementById('sentenceArea');
        const paragraphInput = document.getElementById('paragraphInput');
        const customWordInput = document.getElementById('customWordInput');
        const generateWordsBtn = document.getElementById('generateWords');
        const addCustomWordBtn = document.getElementById('addCustomWord');
        const resetBtn = document.getElementById('resetBtn');
        const checkBtn = document.getElementById('checkBtn');

        let draggedElement = null;

        // Drag start
        wordBank.addEventListener('dragstart', (e) => {
            if (e.target.classList.contains('word')) {
                draggedElement = e.target;
                e.target.classList.add('dragging');
            }
        });

        // Drag end
        wordBank.addEventListener('dragend', (e) => {
            if (e.target.classList.contains('word')) {
                e.target.classList.remove('dragging');
            }
        });

        // Allow drop in sentence area
        sentenceArea.addEventListener('dragover', (e) => {
            e.preventDefault();
        });

        sentenceArea.addEventListener('drop', (e) => {
            e.preventDefault();
            if (draggedElement) {
                const clone = draggedElement.cloneNode(true);
                clone.setAttribute('draggable', 'true');

                // Add delete functionality
                clone.addEventListener('dblclick', () => {
                    clone.remove();
                });

                sentenceArea.appendChild(clone);
            }
        });

        // Allow sorting within the word bank
        wordBank.addEventListener('dragover', (e) => {
            e.preventDefault();
            const afterElement = getDragAfterElement(wordBank, e.clientX);
            if (draggedElement) {
                if (afterElement == null) {
                    wordBank.appendChild(draggedElement);
                } else {
                    wordBank.insertBefore(draggedElement, afterElement);
                }
            }
        });

        function getDragAfterElement(container, x) {
            const draggableElements = [...container.querySelectorAll('.word:not(.dragging)')];
            return draggableElements.reduce((closest, child) => {
                const box = child.getBoundingClientRect();
                const offset = x - box.left - box.width / 2;
                if (offset < 0 && offset > closest.offset) {
                    return { offset: offset, element: child };
                } else {
                    return closest;
                }
            }, { offset: Number.NEGATIVE_INFINITY }).element;
        }

        // Generate words from paragraph
        generateWordsBtn.addEventListener('click', () => {
            const text = paragraphInput.value.trim();
            if (text) {
                const words = text.match(/\S{1,2}/g) || []; // Match 1-2 characters per word
                words.forEach((word) => {
                    const wordElement = document.createElement('div');
                    wordElement.classList.add('word');
                    wordElement.setAttribute('draggable', 'true');
                    wordElement.textContent = word;

                    // Add delete functionality
                    wordElement.addEventListener('dblclick', () => {
                        wordElement.remove();
                    });

                    wordBank.appendChild(wordElement);
                });
                paragraphInput.value = '';
            }
        });

        // Add custom word
        addCustomWordBtn.addEventListener('click', () => {
            const customWord = customWordInput.value.trim();
            if (customWord) {
                const wordElement = document.createElement('div');
                wordElement.classList.add('word');
                wordElement.setAttribute('draggable', 'true');
                wordElement.textContent = customWord;

                // Add delete functionality
                wordElement.addEventListener('dblclick', () => {
                    wordElement.remove();
                });

                wordBank.appendChild(wordElement);
                customWordInput.value = '';
            }
        });

        // Reset button
        resetBtn.addEventListener('click', () => {
            sentenceArea.innerHTML = '';
        });

        // Check button
        checkBtn.addEventListener('click', () => {
            const lines = [];
            const rows = Array.from(sentenceArea.children);
            rows.forEach((row, index) => {
                const line = row.textContent;
                if (line.length > 7) {
                    lines.push(`第 ${index + 1} 行超出 7 字：${line}`);
                }
            });

            if (lines.length > 0) {
                alert(lines.join('\n'));
            } else {
                alert('句子符合格式！');
            }
        });
    </script>
</body>
</html>